% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/render_with_error_handling.R
\name{render_with_error_handling}
\alias{render_with_error_handling}
\title{Render Plot with Error Handling}
\usage{
render_with_error_handling(
  expr,
  error_message = "An error occurred while rendering the plot."
)
}
\arguments{
\item{expr}{Expression. The plotting code to evaluate. This is the main block of code that generates the plot.}

\item{error_message}{Character. A custom message to display when an error occurs. Default is
"An error occurred while rendering the plot."}
}
\value{
The evaluated plot or a blank plot with an error message if the evaluation fails.
}
\description{
\code{render_with_error_handling} is a helper function designed to render plots in a Shiny application.
It wraps the plot-rendering code within a \code{tryCatch} block to gracefully handle errors and display
a user-friendly message in case of failure.
}
\details{
This function ensures that any errors during the rendering of plots are caught and do not crash
the Shiny application. Instead of displaying an error stack trace, the function displays a blank
plot with the error message and a clean explanation of the issue.

The function is intended to be used within Shiny \code{renderPlot} calls to standardize error handling
across multiple plots in the application.
}
\examples{
\dontrun{
# Example usage in a Shiny app
output$measles1 <- renderPlot({
  render_with_error_handling({
    plot(measles1_coverage()) # Replace with your plotting code
  }, error_message = "Failed to render Measles 1 coverage plot.")
})

output$penta3 <- renderPlot({
  render_with_error_handling({
    plot(penta3_coverage()) # Replace with your plotting code
  })
})
}

}
